trigger: none
pr: none

pool:
  name: Default

variables:
  - name: System.Debug
    value: 'true'

stages:
# ──────────────────────
- stage: Stage1_RG
  displayName: 'Stage 1: RG作成 + Slack通知'
  jobs:
  - job: ApplyRG
    displayName: 'RG作成 + 通知'
    steps:
    - task: PowerShell@2
      displayName: 'TerraformでRG作成'
      inputs:
        targetType: 'inline'
        script: |
          cd terraform/stage1-rg
          terraform init
          terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)

    - task: PowerShell@2
      displayName: 'Slack通知（成功）'
      condition: succeeded()
      env:
        SLACK_WEBHOOK_URL: $(SLACK_WEBHOOK_URL)
      inputs:
        targetType: 'inline'
        script: |
          $payload = @{ text = "✅ リソースグループ作成が完了しました（stage1）✅" } | ConvertTo-Json -Compress
          $utf8 = New-Object System.Text.UTF8Encoding($false)
          $body = $utf8.GetBytes($payload)
          Invoke-RestMethod -Uri $env:SLACK_WEBHOOK_URL -Method POST -Body $body -ContentType 'application/json'

    - task: PowerShell@2
      displayName: 'Slack通知（失敗）'
      condition: failed()
      env:
        SLACK_WEBHOOK_URL: $(SLACK_WEBHOOK_URL)
      inputs:
        targetType: 'inline'
        script: |
          $payload = @{ text = "❌ リソースグループ作成に失敗しました（stage1）" } | ConvertTo-Json -Compress
          $utf8 = New-Object System.Text.UTF8Encoding($false)
          $body = $utf8.GetBytes($payload)
          Invoke-RestMethod -Uri $env:SLACK_WEBHOOK_URL -Method POST -Body $body -ContentType 'application/json'

# ──────────────────────
- stage: Stage2_VNet
  displayName: 'Stage 2: VNet作成'
  dependsOn: Stage1_RG
  condition: succeeded()
  jobs:
  - job: ApplyVNet
    displayName: 'VNet作成'
    steps:
    - task: PowerShell@2
      displayName: 'TerraformでVNet作成'
      inputs:
        targetType: 'inline'
        script: |
          cd terraform/stage2-vnet
          terraform init
          terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)

# ──────────────────────
- stage: Stage3_Subnet
  displayName: 'Stage 3: Subnet作成'
  dependsOn: Stage2_VNet
  condition: succeeded()
  jobs:
  - job: ApplySubnet
    displayName: 'Subnet作成'
    steps:
    - task: PowerShell@2
      displayName: 'TerraformでSubnet作成'
      inputs:
        targetType: 'inline'
        script: |
          cd terraform/stage3-subnet
          terraform init
          terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)

# ──────────────────────
- stage: Stage4a_Peering_SpokeToHub
  displayName: 'Stage 4a: Spoke → Hub ピアリング'
  dependsOn: Stage3_Subnet
  condition: succeeded()
  jobs:
  - job: PeeringSpokeToHub
    displayName: 'Spoke → Hub ピアリング作成'
    steps:
    - task: PowerShell@2
      displayName: 'TerraformでSpoke → Hubピアリング作成'
      inputs:
        targetType: 'inline'
        script: |
          cd terraform/stage4a-peering-spoke-to-hub
          terraform init
          terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)  # ← Spoke側
        ARM_TENANT_ID: $(ARM_TENANT_ID)

# ──────────────────────
- stage: Stage4b_Peering_HubToSpoke
  displayName: 'Stage 4b: Hub → Spoke ピアリング'
  dependsOn: Stage4a_Peering_SpokeToHub
  condition: succeeded()
  jobs:
  - job: PeeringHubToSpoke
    displayName: 'Hub → Spoke ピアリング作成'
    steps:
    - task: PowerShell@2
      displayName: 'TerraformでHub → Spokeピアリング作成'
      inputs:
        targetType: 'inline'
        script: |
          cd terraform/stage4b-peering-hub-to-spoke
          terraform init
          terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: 7d1f78e5-bc6c-4018-847f-336ff47b9436  # ← Hub側 明示的に固定
        ARM_TENANT_ID: $(ARM_TENANT_ID)
