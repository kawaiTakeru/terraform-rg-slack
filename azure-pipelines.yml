trigger: none
pr: none

pool:
  name: Default  # ← Self-hosted Agent名

variables:
  - name: System.Debug
    value: 'true'

stages:
- stage: TerraformAndNotify
  displayName: 'Terraform実行とSlack通知'
  jobs:
  - job: ApplyAndNotify
    displayName: 'RG作成 + Slack通知'
    steps:
    - task: PowerShell@2
      displayName: 'TerraformでRG作成'
      inputs:
        targetType: 'inline'
        script: |
          echo "=== 環境変数確認 ==="
          echo "CLIENT_ID: $env:ARM_CLIENT_ID"
          echo "TENANT_ID: $env:ARM_TENANT_ID"
          echo "SUBSCRIPTION_ID: $env:ARM_SUBSCRIPTION_ID"
          echo "CLIENT_SECRET: $env:ARM_CLIENT_SECRET"

          cd terraform
          terraform init

          $stdoutFile = "$env:AGENT_TEMPDIRECTORY\tf_stdout.log"
          $stderrFile = "$env:AGENT_TEMPDIRECTORY\tf_stderr.log"
          if (Test-Path $stdoutFile) { Remove-Item $stdoutFile -Force }
          if (Test-Path $stderrFile) { Remove-Item $stderrFile -Force }

          echo "=== Terraform Apply 実行中 ==="
          Start-Process -FilePath "terraform" `
                        -ArgumentList "apply", "-auto-approve" `
                        -RedirectStandardOutput $stdoutFile `
                        -RedirectStandardError $stderrFile `
                        -NoNewWindow -Wait
          $exitCode = $LASTEXITCODE

          echo "=== Terraform Apply 終了（ExitCode: $exitCode） ==="

          $stdout = if (Test-Path $stdoutFile) { Get-Content $stdoutFile -Raw } else { "" }
          $stderr = if (Test-Path $stderrFile) { Get-Content $stderrFile -Raw } else { "" }
          $output = "$stdout`n$stderr"

          Remove-Item $stdoutFile, $stderrFile -Force -ErrorAction SilentlyContinue

          echo "=== 出力デバッグ ==="
          echo "stderr に 'Error:' を含むかチェック"
          $hasError = $stderr -match "Error:"

          echo "ExitCode: $exitCode"
          echo "hasError: $hasError"

          $escaped = $output -replace "`r`n", "\n" -replace "`n", "\n" -replace "`r", ""
          $truncated = $escaped.Substring(0, [Math]::Min(500, $escaped.Length))

          echo "=== Escaped出力（最初の500文字） ==="
          echo $truncated

          Write-Host "##vso[task.setvariable variable=TF_ERROR_OUTPUT]$truncated"

          if ($exitCode -ne 0 -or $hasError) {
            Write-Host "##vso[task.setvariable variable=TF_RESULT]failed"
            exit 1
          } else {
            Write-Host "##vso[task.setvariable variable=TF_RESULT]success"
          }
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)

    - task: PowerShell@2
      displayName: 'Slack通知（成功）'
      condition: and(succeeded(), eq(variables['TF_RESULT'], 'success'))
      inputs:
        targetType: 'inline'
        script: |
          $webhookUrl = $env:SLACK_WEBHOOK_URL
          if (-not $webhookUrl) {
            Write-Error "❌ SLACK_WEBHOOK_URL が空です。"
            exit 1
          }

          $payload = @{ text = "✅ リソースグループ作成が完了しました（terraform apply）✅" } | ConvertTo-Json -Compress
          $utf8 = New-Object System.Text.UTF8Encoding($false)
          $body = $utf8.GetBytes($payload)

          Invoke-RestMethod -Uri $webhookUrl -Method POST -Body $body -ContentType 'application/json'
      env:
        SLACK_WEBHOOK_URL: $(SLACK_WEBHOOK_URL)

    - task: PowerShell@2
      displayName: 'Slack通知（失敗）'
      condition: failed()
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "=== デバッグ：TF_ERROR_OUTPUT 確認 ==="
          Write-Host "TF_ERROR_OUTPUT: $env:TF_ERROR_OUTPUT"

          $webhookUrl = $env:SLACK_WEBHOOK_URL
          if (-not $webhookUrl) {
            Write-Error "❌ SLACK_WEBHOOK_URL が空です。"
            exit 1
          }

          $errorOutput = $env:TF_ERROR_OUTPUT
          if (-not $errorOutput) {
            $errorOutput = "エラー出力が取得できませんでした。"
          }

          $backtick3 = '```'
          $textBlock = "$backtick3$errorOutput$backtick3"

          $payload = @{
            text = "❌ リソースグループ作成に失敗しました（terraform apply）"
            attachments = @(
              @{
                color = "danger"
                text = $textBlock
              }
            )
          } | ConvertTo-Json -Depth 10 -Compress

          $utf8 = New-Object System.Text.UTF8Encoding($false)
          $body = $utf8.GetBytes($payload)

          Invoke-RestMethod -Uri $webhookUrl -Method POST -Body $body -ContentType 'application/json'
      env:
        SLACK_WEBHOOK_URL: $(SLACK_WEBHOOK_URL)
